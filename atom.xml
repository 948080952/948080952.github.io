<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DaiPei&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://948080952.github.io/"/>
  <updated>2017-06-10T05:49:53.000Z</updated>
  <id>https://948080952.github.io/</id>
  
  <author>
    <name>DaiPei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Masonry源码分析</title>
    <link href="https://948080952.github.io/posts/source_code_analysis_of_masonry/"/>
    <id>https://948080952.github.io/posts/source_code_analysis_of_masonry/</id>
    <published>2017-06-03T01:57:24.000Z</published>
    <updated>2017-06-10T05:49:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;AutoLayout是个好东西，但是官方的API实在不好用，Masonry应时而生为AutoLayout提供了简洁的接口，我们的项目中的布局全部都是用Masonry，可以说离了它有些寸步难行。&lt;/p&gt;
&lt;p&gt;Masonry使用起来是十分简单的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[self.aView mas_makeConstraints:^(MASConstraintMaker *make) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        make.left.equalTo(self.view);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        make.top.equalTo(self.view.mas_top).offset(100);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        make.width.height.mas_equalTo(200);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>仿猪来了转盘button的实现</title>
    <link href="https://948080952.github.io/posts/imitate_button_in_pigcoming/"/>
    <id>https://948080952.github.io/posts/imitate_button_in_pigcoming/</id>
    <published>2017-03-05T11:50:59.000Z</published>
    <updated>2017-06-10T06:16:07.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;猪来了中转盘的按钮十分带感，有一种3D的效果，而实际上是伪3D，且实现起来十分容易，本篇文章就记录一下如何实现这个按钮的效果。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xcode项目文件丢失</title>
    <link href="https://948080952.github.io/posts/file_lost_in_xcode/"/>
    <id>https://948080952.github.io/posts/file_lost_in_xcode/</id>
    <published>2017-02-12T05:32:33.000Z</published>
    <updated>2017-06-10T05:52:19.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;曾经遇到一个问题：Xcode项目中的文件突然只剩下少数几个了，当时把我吓坏了，关闭项目重新打开没有效果，重启计算机没有效果。    &lt;/p&gt;
&lt;p&gt;更奇怪的是在命令行中输入&lt;code&gt;git status&lt;/code&gt;结果却是没有任何文件被改变。    &lt;/p&gt;
&lt;p&gt;这个问题搜索了很久才定位到，其实只是Xcode上一个很简单的按钮被我按下了。    &lt;/p&gt;
&lt;p&gt;所以只是自嘲了一下自己的无知，也没往心里去。    &lt;/p&gt;
&lt;p&gt;然而就在前两天，公司新来的同事跑过来跟我说：能不能帮帮我，我的Xcode出现了一个十分严重的问题，项目文件只剩下几个了。    &lt;/p&gt;
&lt;p&gt;在他焦急目光中，我淡定的关闭了Xcode上的那个功能，项目文件全都回来了，把他都看呆了。    &lt;/p&gt;
&lt;p&gt;本来我觉得这根本不值得写篇博客来记录，但是经过这件事我觉得还是有写下来的必要的。    &lt;/p&gt;
&lt;p&gt;因为当时我解决这个问题真的花了不少时间，虽然是再简单不过的一个问题。    &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Method Swizzling中的陷阱</title>
    <link href="https://948080952.github.io/posts/trap_in_method_swizzling/"/>
    <id>https://948080952.github.io/posts/trap_in_method_swizzling/</id>
    <published>2017-02-05T11:55:15.000Z</published>
    <updated>2017-06-10T05:50:11.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章不是介绍什么是方法交换，这类文章很多，如果你不知道什么是方法交换可以看这篇文章：&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;Method Swizzling&lt;/a&gt;    &lt;/p&gt;
&lt;h2 id=&quot;陷阱&quot;&gt;&lt;a href=&quot;#陷阱&quot; class=&quot;headerlink&quot; title=&quot;陷阱&quot;&gt;&lt;/a&gt;陷阱&lt;/h2&gt;&lt;p&gt;方法交换是很危险的东西，会产生一些未知的错误，最近在使用方法交换时就遇到了这样的问题，在我交换了一个系统方法后，在调用这个方法时会在我交换的方法中循环无法跳出。    &lt;/p&gt;
&lt;p&gt;最终我找到了问题的关键，那就是这个方法可能不存在！&lt;/p&gt;
&lt;p&gt;每次iOS版本的更新都会出现一些新的API，这些API在之前的版本中就不存在，而你在交换一个方法时如果不考虑它是否存在，那就会导致严重的错误。    &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SKStoreProductViewController中的坑</title>
    <link href="https://948080952.github.io/posts/problem_in_skstoreproductviewcontroller/"/>
    <id>https://948080952.github.io/posts/problem_in_skstoreproductviewcontroller/</id>
    <published>2017-01-15T03:12:19.000Z</published>
    <updated>2017-06-10T05:51:59.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在使用SKStoreProductViewController时遇到很多坑，上网搜索时发现关于这个东西的讨论不多，stack overflow上也并没有找到我需要的答案，经过与其3天的抗争，总算是爬出了这些坑，赶紧写篇博客冷静一下。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;首先我们先从SKStoreProductViewController说起，这是一个应用内的应用商店，就是说在应用内部无须跳转到应用商店就可以预览并下载应用，和在应用商店内部并无差异，体验是相当不错，但是如果没有找到正确的使用姿势，那么会让你苦不堪言。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocoaPods版本升级</title>
    <link href="https://948080952.github.io/posts/update_cocoaspods_version/"/>
    <id>https://948080952.github.io/posts/update_cocoaspods_version/</id>
    <published>2017-01-11T11:00:22.000Z</published>
    <updated>2017-06-10T05:43:13.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天pod install的时候提示我pod版本低于Podfile.lock要求的版本，这样可能会造成一些兼容的问题，没办法赶紧去更新pod。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;首先看一下自己pod的版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ pod --version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1.1.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一些好用的Mac软件推荐</title>
    <link href="https://948080952.github.io/posts/app_recommand_on_mac/"/>
    <id>https://948080952.github.io/posts/app_recommand_on_mac/</id>
    <published>2016-12-30T13:43:38.000Z</published>
    <updated>2017-06-10T05:42:13.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又到了月末，也是这一年的年末，按照计划我要完成这个月最后一篇博客，那么2016也算是圆满了，虽然开始很多宏伟的计划都渐渐搁浅，但是我每月四篇的博客却没有停下，这是2016年我唯一坚持下来的事情了。由于最近忙于复习考试，没啥时间去钻研技术（其实时间都用来看电影了），所以这篇博客就写一些非技术的东西，自己使用Mac也快一年了，这里就推荐几款自己平时很喜欢用的软件，当然这类文章是挺多的，所以我这里不会写的太详细，主要是把我觉得不错的应用做一个汇总，虽然不详细，但是会很全面，包括各个方面，废话不多说我们进入正题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发之快速上手KVO</title>
    <link href="https://948080952.github.io/posts/use_kvo_in_one_minute/"/>
    <id>https://948080952.github.io/posts/use_kvo_in_one_minute/</id>
    <published>2016-12-22T13:02:00.000Z</published>
    <updated>2017-06-10T05:45:13.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写这篇博客的原因是昨晚需要用到KVO，只是要用最简单的KVO，观察一个属性，在其改变时得到通知，然而到网上找了许多博客，看了许多文章，都是长篇大论介绍了一大堆什么是KVO，然而看完我还是一脸蒙逼，我只是想要快速部署，你跟我说那么多干嘛，最后还是自己写了一个Demo跑通了，这里就写一篇博客，记录一下如何部署一个最简单的KVO，让有同样需求的人能够在最短的时间里部署KVO。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的横屏问题</title>
    <link href="https://948080952.github.io/posts/landscape_problem_in_ios/"/>
    <id>https://948080952.github.io/posts/landscape_problem_in_ios/</id>
    <published>2016-12-16T18:48:16.000Z</published>
    <updated>2017-06-10T05:45:35.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近项目中遇到一个问题，需要使某些界面强制横屏，某些界面只能竖屏，比较难的地方是在于需要横屏的界面的VC是拿不到的，只能通过一些非正常的手段来做到，虽然能够解决，不过却不是非常优雅的方法，但是在探索的过程中却对iOS中的屏幕方向问题有所了解，在这里写篇博客记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】NSArray的奇妙探索之旅（深入探究NSArray）</title>
    <link href="https://948080952.github.io/posts/nsarray_amazing_adventures/"/>
    <id>https://948080952.github.io/posts/nsarray_amazing_adventures/</id>
    <published>2016-12-10T16:37:24.000Z</published>
    <updated>2017-06-10T05:35:46.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自&lt;a href=&quot;http://arigrant.com/blog/2014/1/19/adventures-in-the-land-of-nsarray&quot;&gt;The Amazing Adventures of NSArray&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：原文对NSArray进行了深入的探究，挖掘了许多令人不可思议的东西，但也有那么些错误的地方（当然只是现在运行起来会出问题），在文中我会指出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们用两行奇怪的代码开始这篇文章。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[NSArray alloc] isKindOfClass:[NSMutableArray class]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[NSMutableArray alloc] isKindOfClass:[NSArray class]];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;事实证明上面两行的返回值都是真。没事请放松，但是准备一个篮子防止你的脑子发生泄露，这比疯狂还要疯狂。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Foundation对象与Core Foundation对象间的转换：Toll-Free Birdge</title>
    <link href="https://948080952.github.io/posts/transform_between_foundation_corefoundation/"/>
    <id>https://948080952.github.io/posts/transform_between_foundation_corefoundation/</id>
    <published>2016-11-27T12:33:34.000Z</published>
    <updated>2017-06-10T05:43:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作为iOS开发人员，却对iOS开发中用到的框架分不清楚，比如说Core Foundation和Foundation，只是知道在这两者之间需要用__bridge进行转换，却没有去具体的研究一下。今天就记录一下这二者之间的区别，和二者之间该如何进行转换。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【译】Objective-C中类的+load和+initialize</title>
    <link href="https://948080952.github.io/posts/load_and_initialize_in_oc/"/>
    <id>https://948080952.github.io/posts/load_and_initialize_in_oc/</id>
    <published>2016-11-25T17:06:01.000Z</published>
    <updated>2017-06-10T05:36:45.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自&lt;a href=&quot;https://www.mikeash.com&quot;&gt;Mike Ash&lt;/a&gt;的&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2009-05-22-objective-c-class-loading-and-initialization.html&quot;&gt;Friday Q&amp;amp;A 2009-05-22: Objective-C Class Loading and Initialization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎回到周五问答。在几周的休息之后，我准备回到正常的日程上来，我们将看到这意志能影响我多久，不过我很乐观。这周我将听从Daniel Jalkut的建议，谈谈Objective-C中类的加载和初始化（loading&amp;amp;initialization）。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发中的HexString</title>
    <link href="https://948080952.github.io/posts/hexstring_in_ios/"/>
    <id>https://948080952.github.io/posts/hexstring_in_ios/</id>
    <published>2016-11-21T00:43:37.000Z</published>
    <updated>2017-06-10T05:46:29.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;按照正常的时间来说，今天应该在写本月的第三篇博客，但这个月各种忙，主要是几场考试加上学校公司里的一些事情，有时候本打算写一篇博客却被朋友叫去聚餐，又或是受不住一些影视剧的诱惑，到了今天总算有时间把这个月第二篇博客写出来了。&lt;br&gt;前段时间在项目中遇到了HexString，既然遇到了，那么肯定要把它搞明白，所以今天就来说说在iOS开发中的HexString。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中的Assets.xcassets和Assets.car</title>
    <link href="https://948080952.github.io/posts/assets_in_ios/"/>
    <id>https://948080952.github.io/posts/assets_in_ios/</id>
    <published>2016-11-13T13:58:09.000Z</published>
    <updated>2017-06-10T05:46:01.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;在iOS开发中，最终项目的大小跟项目中的图片关系很大，因为代码的大小是很小的，可以说影响最终项目大小的主要就是项目中的图片资源，所以如何组织项目中的图片资源显得尤为重要。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ios中生产者模式实例：非激励广告架构的优化过程</title>
    <link href="https://948080952.github.io/posts/no_reward_ads_optimization/"/>
    <id>https://948080952.github.io/posts/no_reward_ads_optimization/</id>
    <published>2016-10-30T09:26:33.000Z</published>
    <updated>2017-06-10T05:48:02.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇博客基于我很久以前在公司项目中做的一个模块，当时刚做这个模块的时候完全没有考虑过设计模式上的东西，一心想着把功能实现了，最后的确是把功能实现了，但是内部逻辑混乱毫无章法，可能当时项目没有太忙，我的mentor就让我不断的优化那个模块，本来不到一个星期就完成的模块，加上后面优化的时间竟然是花了整整一个月！后来也做了一个组内的分享，现在也拿来分享给大家吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS中UIGestureRecognizer相关问题</title>
    <link href="https://948080952.github.io/posts/gesture_recognizer_in_ios/"/>
    <id>https://948080952.github.io/posts/gesture_recognizer_in_ios/</id>
    <published>2016-10-20T05:14:11.000Z</published>
    <updated>2017-06-10T05:48:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这段时间在写一些手势相关的代码，遇到了不少的坑，也解决了不少问题，所以准备写这篇博客，将自己的这段时间遇到的东西总结出来分享给大家，当然需要注意的是这篇文章并不是介绍如何使用UIGestureRecognizer，因为这类文章已经非常多了，我再写一篇也没有多大意义，也很难写出跟别人不一样的文章，这篇文章重点在于手势中的一些问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ios开发：Xcode8制作framework及使用</title>
    <link href="https://948080952.github.io/posts/make_framework_by_xcode8/"/>
    <id>https://948080952.github.io/posts/make_framework_by_xcode8/</id>
    <published>2016-10-07T05:18:15.000Z</published>
    <updated>2017-06-10T05:44:18.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;网上关于Framework制作的教程数不胜数，然而都过于陈旧，最新的也是使用Xcode7的教程，而且有些设置也只给出步骤，并没有给出原因，而且按照有些教程制作出的framework还有些问题，所以我把自己制作framework的过程记录下来，并且使用的是最新的Xcode8环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一个iOS项目总结（二）：界面</title>
    <link href="https://948080952.github.io/posts/yuxin_summary_series_two/"/>
    <id>https://948080952.github.io/posts/yuxin_summary_series_two/</id>
    <published>2016-10-04T09:13:13.000Z</published>
    <updated>2017-06-10T05:41:13.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;今年暑假，自己独立完成了一个简单的iOS的APP，是一个bbs的客户端，叫做喻信星空。现在正在测试，准备将其上架app store。但是光做项目不做总结肯定不行，所以这里写篇博客，把项目里遇到的坑都记录下来，所以这篇博客里肯定是有干货的，所以如果你看到了这里，希望你能把它看完，并顶我一下(^-^)&lt;/p&gt;
&lt;p&gt;这是我项目总结的系列博文中的第二篇，此篇文章中列出了在界面编程过程中遇到的问题和一些心得体会，分享给大家，如果有错误或不妥的地方，欢迎大家在评论中指出！&lt;/p&gt;
    
    </summary>
    
    
      <category term="ios开发" scheme="https://948080952.github.io/tags/ios%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一个iOS项目总结（一）：网络接口的封装</title>
    <link href="https://948080952.github.io/posts/yuxin_summary_series_one/"/>
    <id>https://948080952.github.io/posts/yuxin_summary_series_one/</id>
    <published>2016-09-24T05:43:42.000Z</published>
    <updated>2017-06-10T05:41:22.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;今年暑假，自己独立完成了一个简单的iOS的APP，是一个bbs的客户端，叫做喻信星空。现在正在测试，准备将其上架app store。但是光做项目不做总结肯定不行，所以这里写篇博客，把项目里遇到的坑都记录下来，不过这篇博客里肯定是有干货的，所以如果你看到了这里，希望你能把它看完，并顶我一下(^-^)&lt;br&gt;这是一系列博客，此系列共两篇文章，此篇博客是该系列博客的第一篇：网络接口的封装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://948080952.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何正确使用@synthesize（在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？）</title>
    <link href="https://948080952.github.io/posts/how_to_use_synthesize_correctly/"/>
    <id>https://948080952.github.io/posts/how_to_use_synthesize_correctly/</id>
    <published>2016-09-21T10:21:08.000Z</published>
    <updated>2017-06-10T05:39:20.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这篇博客本来是回答《招聘一个靠谱的iOS》中&lt;em&gt;在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？&lt;/em&gt; 的这一问题，但是写着写着在了解了property的相关内容后，突然冒出了许多对@synthesize使用方法的理解，并且记录了下来，希望分享给大家，与大家一同进步，如果理解的不正确，欢迎在评论区指正，有评论必回！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
